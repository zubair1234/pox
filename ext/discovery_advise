import get_link() from ryu.topology.switches and
> call it whenever you want to get a topo in your RyuApp.
> Event(request if sync is required) is used to pass information across
> different applications, like if I start switches.py and my own app together
> and I can send request to switches.py through get_switch() to get switch
> info.
> 
> Then what does _CONTEXT do? For example in the link exaggeration example,
> the simple switch is in the context of lacplib. Then what is the relation
> between "lib" and "app" in RYU? What does the fact that
> simple_switch_lacp_13.py is in the CONTEXT of lacplib mean?

In short, _CONTEXT is the old mechanism, which couples components
tightly. I hope that we can remove _CONTEXT one day.

Use event feature where possible




Hi,

On Thu, 20 Mar 2014 10:06:11 -0500
Dong Mo <montedong@...> wrote:

> I have the same question.
> It could be that when you receive the SwitchFeature event and then install
> flow in the corresponding switch or monitor the topology and wait for all
> switches go up and install flows
> But I am also wondering what should be a reference implementation for
> something like this

You can use ofp_event.EventOFPStateChange to catch the participation
of a new switch (and its departure):

http://osrg.github.io/ryu-book/en/html/traffic_monitor.html

Of course, you can find example code to install flows in Ryu book too.
http://sourceforge.net/p/ryu/mailman/message/32145949/
naveed https://groups.google.com/forum/#!msg/routeflow-discuss/foJc9_ivzAY/px6lepJ9aM0J


---------------------------------------------

New link discovery 
class OF13(app_manager.RyuApp):
OFP_VERSIONS = [ofproto_v1_3.OFP_VERSION]

_CONTEXTS = {
    'dpset': dpset.DPSet,
}

def __init__(self, *args, **kwargs):
    super(OF13, self).__init__(*args, **kwargs)
    self.dpset = kwargs['dpset']     

def _get_hwaddr(self, dpid, port_no):
    return self.dpset.get_port(dpid, port_no).hw_addr

@handler.set_ev_cls(event.EventLinkAdd)
def link_add(self, ev):
    print ev.link.src, ev.link.dst
    print self._get_hwaddr(ev.link.src.dpid, ev.link.src.port_no)   ## gets new link information and description
    
    
----------------------------------------------------------------------------





