#Load balancer based on simple_switch_13 and simpleMonitor code from Ryu example documentation.
#When the controller starts up, Table-miss flows are installed. One rule matches on all traffic, at priority 0.
#Another matches on all TCP, at priority 10. 
#These flows are instructed to send packet-ins to the controller from the switch upon packet match.
#New flows are then installed, to prevent further packet-ins. For traffic between hosts h1 to h3, new flows are installed
#with priority 1. For TCP traffic headed towards IP address of 10.0.0.4, new flows are installed with priority 20.
#
#Flow balancing is performed at new flow creation. When TCP sessions towards 10.0.0.4 are initiated, they are assigned
#to a flow based on current link utilisations on ports 4 and 5. Note that hosts 4 and 5 connected on ports 4 and 5 respectively
#share the same IP and MAC address of 10.0.0.4 and 00:00:00:00:00:04. This is aimed to simulate a multi-home setup with two links
#to the internet.
from __future__ import division
from ryu.base import app_manager
from ryu.controller import ofp_event
from ryu.controller.handler import CONFIG_DISPATCHER, MAIN_DISPATCHER, DEAD_DISPATCHER
from ryu.controller.handler import set_ev_cls
from ryu.ofproto import ofproto_v1_3
from ryu.lib.packet import packet
from ryu.lib.packet import ethernet, tcp
from ryu.lib import hub
from operator import attrgetter


class Loadbalancer(app_manager.RyuApp):
    OFP_VERSIONS = [ofproto_v1_3.OFP_VERSION]

    def __init__(self, *args, **kwargs):
        super(Loadbalancer, self).__init__(*args, **kwargs)
        self.mac_to_port = {}
        self.monitor_thread = hub.spawn(self._monitor)
        self.bwstats = {}
        self.datapaths = {}
        self.usage = {"Port4": 1.1,
                      "Port5": 1.1}
        self.flag = 0
    @set_ev_cls(ofp_event.EventOFPSwitchFeatures, CONFIG_DISPATCHER)
    def switch_features_handler(self, ev):
        datapath = ev.msg.datapath
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser

        # install table-miss flow entry
        #
        # We specify NO BUFFER to max_len of the output action due to
        # OVS bug. At this moment, if we specify a lesser number, e.g.,
        # 128, OVS will send Packet-In with invalid buffer_id and
        # truncated packet data. In that case, we cannot output packets
        # correctly.
        match = parser.OFPMatch()
        actions = [parser.OFPActionOutput(ofproto.OFPP_CONTROLLER,
                                          ofproto.OFPCML_NO_BUFFER)]
        self.add_flow(datapath, 0, match, actions)
    @set_ev_cls(ofp_event.EventOFPSwitchFeatures, CONFIG_DISPATCHER)
    def addTCP(self, ev):
        datapath = ev.msg.datapath
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser
        match = parser.OFPMatch(eth_type = 0x0800, ip_proto = 6)
        actions = [parser.OFPActionOutput(ofproto.OFPP_CONTROLLER,ofproto.OFPCML_NO_BUFFER)]
        self.add_flow(datapath, 10, match, actions)
        #We add the TCP catch-all. Set eth_type for IPV4

    def add_flow(self, datapath, priority, match, actions):
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser

        inst = [parser.OFPInstructionActions(ofproto.OFPIT_APPLY_ACTIONS,
                                             actions)]

        mod = parser.OFPFlowMod(datapath=datapath, priority=priority,
                                match=match, instructions=inst)
        datapath.send_msg(mod)

    @set_ev_cls(ofp_event.EventOFPPacketIn, MAIN_DISPATCHER)
    def _packet_in_handler(self, ev):
        msg = ev.msg
        datapath = msg.datapath
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser
        in_port = msg.match['in_port']
        pkt = packet.Packet(msg.data)
        eth = pkt.get_protocols(ethernet.ethernet)[0]
        if (pkt.get_protocol(tcp.tcp) and eth.dst == "00:00:00:00:00:04"):
            #We got an unflow'd TCP packet towards h4, make new flow
            tc = pkt.get_protocols(tcp.tcp)[0]
            dstport = tc.dst_port
            srcport = tc.src_port
            dst = eth.dst
            src = eth.src
            dpid = datapath.id
            self.logger.info("Received TCP packet\n srcport: %d\tdstport: %d",
                              srcport, dstport)
            match = parser.OFPMatch(tcp_src = srcport, tcp_dst = dstport, in_port = in_port, ip_proto = 6,eth_type = 0x0800)
            if self.usage["Port5"] < self.usage["Port4"]:
                self.logger.info("Pushing TCP flow to Port5")
                actions = [parser.OFPActionOutput(5)]
                self.add_flow(datapath, 20, match, actions)
                match = parser.OFPMatch(tcp_src = srcport, tcp_dst = dstport, in_port = 5, ip_proto = 6,eth_type = 0x0800)
                actions = [parser.OFPActionOutput(in_port)]
                self.add_flow(datapath, 20, match, actions) #Make reverse flow
            else:
                self.logger.info("Pushing TCP flow to Port4")
                actions = [parser.OFPActionOutput(4)]
                self.add_flow(datapath, 20, match, actions) 
                match = parser.OFPMatch(tcp_src = srcport, tcp_dst = dstport, in_port = 5, ip_proto = 6, eth_type = 0x0800)
                actions = [parser.OFPActionOutput(in_port)]
                self.add_flow(datapath, 20, match, actions)

            data = None
            if msg.buffer_id == ofproto.OFP_NO_BUFFER:
                data = msg.data
            out = parser.OFPPacketOut(datapath=datapath, buffer_id=msg.buffer_id,
                                  in_port=in_port, actions=actions, data=data)
            datapath.send_msg(out)    
        else:
            dst = eth.dst
            src = eth.src
            

            dpid = datapath.id
            self.mac_to_port.setdefault(dpid, {})

            self.logger.info("packet in %s %s %s %s", dpid, src, dst, in_port)

            # learn a mac address to avoid FLOOD next time.
            self.mac_to_port[dpid][src] = in_port

            if dst in self.mac_to_port[dpid]:
                out_port = self.mac_to_port[dpid][dst]
            else:
                out_port = ofproto.OFPP_FLOOD

            actions = [parser.OFPActionOutput(out_port)]

            # install a flow to avoid packet_in next time
            if out_port != ofproto.OFPP_FLOOD:
                match = parser.OFPMatch(in_port=in_port, eth_dst=dst)
                self.add_flow(datapath, 1, match, actions)

            data = None
            if msg.buffer_id == ofproto.OFP_NO_BUFFER:
                data = msg.data

            out = parser.OFPPacketOut(datapath=datapath, buffer_id=msg.buffer_id,
                                      in_port=in_port, actions=actions, data=data)
            datapath.send_msg(out)

    @set_ev_cls(ofp_event.EventOFPStateChange,[MAIN_DISPATCHER, DEAD_DISPATCHER])
    def _state_change_handler(self, ev):
        datapath = ev.datapath

        if ev.state == MAIN_DISPATCHER:
            if not datapath.id in self.datapaths:
                self.logger.debug('register datapath: %016x', datapath.id)
                self.datapaths[datapath.id] = datapath
        elif ev.state == DEAD_DISPATCHER:
            if datapath.id in self.datapaths:
                self.logger.debug('unregister datapath: %016x', datapath.id)
                del self.datapaths[datapath.id]
    def _monitor(self):
        while True:
            for dp in self.datapaths.values():
                self._request_stats(dp)
            hub.sleep(3)

    def _request_stats(self, datapath):
        self.logger.debug('send stats request: %016x', datapath.id)
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser

        req = parser.OFPFlowStatsRequest(datapath)
        datapath.send_msg(req)

        req = parser.OFPPortStatsRequest(datapath, 0, ofproto.OFPP_ANY)
        datapath.send_msg(req)

    @set_ev_cls(ofp_event.EventOFPFlowStatsReply, MAIN_DISPATCHER)
    def _flow_stats_reply_handler(self, ev):
        body = ev.msg.body

        self.logger.info('datapath         '
                         'in-port  eth-dst           '
                         'out-port packets  bytes')
        self.logger.info('---------------- '
                         '-------- ----------------- '
                         '-------- -------- --------')
        for stat in sorted([flow for flow in body if flow.priority == 1],
                           key=lambda flow: (flow.match['in_port'],
                                             flow.match['eth_dst'])):
            self.logger.info('%016x %8x %17s %8x %8d %8d',
                             ev.msg.datapath.id,
                             stat.match['in_port'], stat.match['eth_dst'],
                             stat.instructions[0].actions[0].port,
                             stat.packet_count, stat.byte_count)

    @set_ev_cls(ofp_event.EventOFPPortStatsReply, MAIN_DISPATCHER)
    def _port_stats_reply_handler(self, ev):
        body = ev.msg.body
        

        self.logger.info('datapath         port     '
                         'rx-kbytes rx-error '
                         'tx-kbytes tx-error')
        self.logger.info('---------------- -------- '
                         '-------- -------- -------- --------')
        for stat in sorted(body, key=attrgetter('port_no')):
            self.logger.info('%016x %8x %8.1f %8.1f %8d %8d', 
                             ev.msg.datapath.id, stat.port_no,
                             stat.rx_bytes/1000, stat.rx_errors,
                             stat.tx_bytes/1000, stat.tx_errors)
            if stat.port_no in self.bwstats:
                if stat.port_no == 4 or stat.port_no == 5:
                    key = "Port" + repr(stat.port_no)
                    bytes = stat.rx_bytes + stat.tx_bytes - self.bwstats[stat.port_no]
                    currentrate = bytes/(3*1000) #insert timing here
                    currentrate = 8 * currentrate #bytes to bits
                    self.usage[key] = (currentrate/1000) * 100 #percentage
                    self.logger.info("Current usage of port%d: %.4f%%, %.8f kbits/second", stat.port_no, self.usage[key], currentrate)
                    self.bwstats[stat.port_no] = stat.rx_bytes + stat.tx_bytes
            else:
                self.bwstats[stat.port_no] = stat.rx_bytes + stat.tx_bytes
